{"version":3,"sources":["Const/logoDimensions.js","Const/index.js","Atom/Atom.js","Atlantide/LineMaker.js","Atlantide/PatternMaker.js","views/PatternView/PatternView.js","App.js","index.js"],"names":["magicRatio","value","Math","tan","PI","logoWidth","logoHeight","spacing","phi","sqrt","Atom","props","logoPoints","Const","join","fill","stroke","strokeWidth","d","LineMaker","numberOfAtoms","atoms","SemiLine","Array","from","e","i","n","state","floor","reversed","x","href","className","multiplier","withCouples","id","PatternMaker","Vspace","content","push","y","Hspace","PatternView","viewBox","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RACO,SAASA,EAAWC,GAEvB,OAAOA,EAAM,EAAEC,KAAKC,IAAI,GAAGD,KAAKE,GAAG,KAGhC,IAAMC,EAAY,IACZC,EAAaN,EAAWK,GACxBE,EAAUF,EAAU,GCRpBG,GAAO,EAAIN,KAAKO,KAAK,IAAM,E,MCuBzBC,MApBf,SAAcC,GACZ,IAAIC,EAAa,CACD,EAAdC,EAAiBA,EAAmBA,EAA+B,EAAdA,GACvC,EAAdA,EAAiBA,EACH,EAAdA,EAAiBA,EACH,EAAdA,EAAiBA,EAAmBA,EAA+B,EAAdA,GACvC,EAAdA,EAAiBA,EAAmBA,EAA+B,EAAdA,GACvC,EAAdA,EAAiBA,EACjBA,EAAiBA,EACH,EAAdA,EAAiB,EACjB,EAAGA,EACW,EAAdA,EAAiBA,GACjBC,KAAK,KACL,OAAO,sBACCC,KAAK,OACLC,OAAO,0BACPC,YAAaJ,EAAc,GAAG,EAC9BK,EAAG,IAAMN,EAAa,O,YCiBnBO,MAlCf,SAAmBR,GAEjB,IAAIS,EAA8B,EAAdT,EAAMU,MACtBd,GAA2B,EAAhBI,EAAMJ,SAAeM,EAKhCS,EAAW,WACb,OAAOC,MAAMC,KAAKD,MAAMH,IAAgB,SAACK,EAAGC,GAC1C,IANeC,EAMXC,GANWD,EAMOD,EALhB,GAAGxB,KAAK2B,OAAOF,EAAE,GAAId,GAAWX,KAAK2B,OAAOF,EAAE,GAAGd,KAOvD,OAAa,KADbe,GAASjB,EAAMmB,WACW,IAARF,EACR,qBAAaG,GAAIlB,EAA0B,EAARN,GAAamB,EAAGM,KAAK,SAA9CN,GAEX,qBAAaK,GAAIlB,EAA0B,EAARN,GAAamB,EAAGM,KAAK,QAAQC,UAAU,aAAhEP,OAKnBQ,EAAavB,EAAMwB,YAAc,EAAI,EACzC,OACE,qCACE,wBAAQC,GAAG,WAAX,SACE,cAACd,EAAD,MAEF,yBAAQc,GAAG,OAAX,UACE,qBAAKJ,KAAK,cACV,qBAAKD,EAAGlB,EAAgB,EAAIN,EAAQ2B,EAAYD,UAAU,YAAYD,KAAK,qB,MCXpEK,MAhBf,SAAsB1B,GAQpB,IANA,IAEmBgB,EAFfP,EAA8B,EAAdT,EAAMU,MACtBd,GAA0B,EAAfI,EAAM2B,QAAczB,EAI/B0B,EAAU,GACLb,EAAI,EAAGA,EAAIN,EAAgB,EAAGM,IACjB,KALHC,EAKJD,EAJL,GAAGxB,KAAK2B,OAAOF,EAAE,GAAId,GAAWX,KAAK2B,OAAOF,EAAE,GAAGd,KAKvD0B,EAAQC,KAAK,qBAAKC,GAAI5B,EAAmBN,GAAWmB,EAAGM,KAAK,WAE9DO,EAAQC,KAAK,qBAAKC,GAAI5B,EAAmBN,IAAYmB,EAAGM,KAAK,QAAQC,UAAU,eAEjF,OAAQ,qCAAE,cAAC,EAAD,CAAW1B,QAASI,EAAM+B,OAAQrB,MAAOD,EAAee,YAAaxB,EAAMwB,cAAgBI,MCNxFI,MARf,SAAqBhC,GACnB,OACE,qBAAKiC,QAAS,OAAS/B,EAAkB,IAAMA,EAAkBoB,UAAU,YAA3E,SAEE,cAAC,EAAD,CAAcS,OAAQ,IAAKJ,OAAQ,IAAKjB,MAAO,QCStCwB,MAbf,WACE,OACE,qCACE,qBAAKZ,UAAU,SAAf,SACE,wBAAQG,GAAG,OAAOQ,QAAS,OAAS/B,EAAkB,IAAMA,EAA5D,SACI,cAAC,EAAD,QAGN,cAAC,EAAD,QCRNiC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5690f1d8.chunk.js","sourcesContent":["//brand costants\nexport function magicRatio(value) {\n    // diviso 2 per ottenere metà base tirangolo * tan(54°)\n    return value/2*Math.tan(54*Math.PI/180)\n}\n//logo dimensions\nexport const logoWidth = 1000\nexport const logoHeight = magicRatio(logoWidth)\nexport const spacing = logoWidth/10","export const phi = (1 + Math.sqrt(5)) / 2\nexport * from \"./logoDimensions\";","import React from 'react';\nimport * as Const from '../Const'\nimport './Atom.scss'\nfunction Atom(props)  {\n  var logoPoints = [\n    Const.spacing*3, Const.logoHeight - Const.magicRatio(Const.spacing*2),\n    Const.spacing*4, Const.logoHeight,\n    Const.spacing*6, Const.logoHeight,\n    Const.spacing*4, Const.logoHeight - Const.magicRatio(Const.spacing*4),\n    Const.spacing*5, Const.logoHeight - Const.magicRatio(Const.spacing*6),\n    Const.spacing*8, Const.logoHeight,\n    Const.logoWidth, Const.logoHeight,\n    Const.spacing*5, 0,\n    0, Const.logoHeight,\n    Const.spacing*2, Const.logoHeight\n  ].join(' ')\n    return(<path\n            fill=\"none\"\n            stroke=\"hsl(45.6deg, 100%, 50%)\"\n            strokeWidth={Const.spacing/10*2}\n            d={'M' + logoPoints + 'z'}\n          />)\n}\nexport default Atom;","import React from 'react';\nimport * as Const from '../Const'\nimport './LineMaker.scss'\nfunction LineMaker(props) {\n  //pattern maker riceve il parametro essenziale ovvero il numero di atomi che formano il pattern\n  var numberOfAtoms = props.atoms | 1\n  let spacing = (props.spacing | 1) * Const.spacing\n  function getSignAt(n) {\n    return (2-(Math.floor((n+2)* Const.phi)-Math.floor((n+1)*Const.phi)))\n  }\n\n  let SemiLine = () => {\n    return Array.from(Array(numberOfAtoms), (e, i) => {\n      let state = getSignAt(i)\n      state ^= props.reversed;\n      if(state === 0 || state===1) {\n        return (<use key={i} x={(Const.logoWidth + spacing*4) * i} href=\"#Atom\"/>)\n      } else {\n        return(<use key={i} x={(Const.logoWidth + spacing*4) * i} href=\"#Atom\" className=\"mirrorHor\" />)\n      }\n    })\n  }\n  //se la direttiva ci dice di usare coppie avviciniamo i gruppi delle due semiline\n  var multiplier = props.withCouples ? 1 : 2\n  return (\n    <>\n      <symbol id=\"SemiLine\">\n        <SemiLine />\n      </symbol>\n      <symbol id=\"Line\">\n        <use href=\"#SemiLine\" />\n        <use x={Const.logoWidth/2 + spacing*multiplier} className=\"mirrorVer\" href=\"#SemiLine\" />\n      </symbol>\n    </>\n    \n    )\n}\nexport default LineMaker","import React from 'react';\nimport * as Const from '../Const'\nimport LineMaker from './LineMaker'\nimport './PatternMaker.scss'\nfunction PatternMaker(props) {\n  //pattern maker riceve il parametro essenziale ovvero il numero di atomi che formano il pattern\n  let numberOfAtoms = props.atoms | 1\n  let spacing = (props.Vspace | 1) * Const.spacing\n  function getSignAt(n) {\n    return (2-(Math.floor((n+2)* Const.phi)-Math.floor((n+1)*Const.phi)))\n  }\n  let content = []\n  for (let i = 0; i < numberOfAtoms - 1; i++) {\n    if(getSignAt(i) === 0)\n      content.push(<use y={(Const.logoHeight + spacing) * i} href=\"#Line\"/>)\n    else\n    content.push(<use y={(Const.logoHeight + spacing) * -i} href=\"#Line\" className=\"mirrorVer\" />)\n  }\n  return (<><LineMaker spacing={props.Hspace} atoms={numberOfAtoms} withCouples={props.withCouples} />{content}</>)\n}\nexport default PatternMaker","import React from 'react';\nimport './PatternView.scss';\nimport * as Const from '../../Const'\nimport PatternMaker from '../../Atlantide/PatternMaker'\nfunction PatternView(props)  {\n  return(\n    <svg viewBox={\"0 0 \" + Const.logoWidth + \" \" + Const.logoHeight} className=\"svgViewer\">\n      {/* <PatternMaker Hspace={2} Vspace={1.5} atoms={30}  withCouples/> */}\n      <PatternMaker Hspace={1.8} Vspace={1.8} atoms={30} />\n    </svg>\n  )\n}\nexport default PatternView;","import './App.css';\nimport * as Const from './Const'\nimport Atom from './Atom/Atom'\nimport PatternView from './views/PatternView/PatternView';\nfunction App() {\n  return (\n    <>\n      <svg className=\"symbol\">\n        <symbol id=\"Atom\" viewBox={\"0 0 \" + Const.logoWidth + \" \" + Const.logoHeight}>\n            <Atom />\n        </symbol>\n      </svg>\n      <PatternView />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}